// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: ipproxy/v1/ip.proto

package ipproxyv1

import (
	context "context"
	v1 "github.com/go-gost/x/gen/proto/go/proxy/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IpProxyServiceClient is the client API for IpProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpProxyServiceClient interface {
	// 获取订单ip
	GetIp(ctx context.Context, in *GetIpReq, opts ...grpc.CallOption) (*v1.IpInfoResp, error)
}

type ipProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIpProxyServiceClient(cc grpc.ClientConnInterface) IpProxyServiceClient {
	return &ipProxyServiceClient{cc}
}

func (c *ipProxyServiceClient) GetIp(ctx context.Context, in *GetIpReq, opts ...grpc.CallOption) (*v1.IpInfoResp, error) {
	out := new(v1.IpInfoResp)
	err := c.cc.Invoke(ctx, "/ipproxy.v1.IpProxyService/GetIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpProxyServiceServer is the server API for IpProxyService service.
// All implementations should embed UnimplementedIpProxyServiceServer
// for forward compatibility
type IpProxyServiceServer interface {
	// 获取订单ip
	GetIp(context.Context, *GetIpReq) (*v1.IpInfoResp, error)
}

// UnimplementedIpProxyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIpProxyServiceServer struct {
}

func (UnimplementedIpProxyServiceServer) GetIp(context.Context, *GetIpReq) (*v1.IpInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIp not implemented")
}

// UnsafeIpProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpProxyServiceServer will
// result in compilation errors.
type UnsafeIpProxyServiceServer interface {
	mustEmbedUnimplementedIpProxyServiceServer()
}

func RegisterIpProxyServiceServer(s grpc.ServiceRegistrar, srv IpProxyServiceServer) {
	s.RegisterService(&IpProxyService_ServiceDesc, srv)
}

func _IpProxyService_GetIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpProxyServiceServer).GetIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipproxy.v1.IpProxyService/GetIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpProxyServiceServer).GetIp(ctx, req.(*GetIpReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IpProxyService_ServiceDesc is the grpc.ServiceDesc for IpProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IpProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipproxy.v1.IpProxyService",
	HandlerType: (*IpProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIp",
			Handler:    _IpProxyService_GetIp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipproxy/v1/ip.proto",
}
