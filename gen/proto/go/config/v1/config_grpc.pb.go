// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: config/v1/config.proto

package configv1

import (
	context "context"
	v1 "github.com/go-gost/x/gen/proto/go/proxy/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigServiceClient interface {
	// 获取最新的配置
	GetSetting(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.Setting, error)
	// 获取最新客户端信息
	GetClientInfo(ctx context.Context, in *v1.ClientReq, opts ...grpc.CallOption) (*v1.Client, error)
	// 获取vps信息
	GetVpsInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.Vps, error)
	// 上报ip信息
	SetIpInfo(ctx context.Context, in *v1.IpInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 用户认证信息
	GetUserAuth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.UserAuthResp, error)
	// 用户限流信息
	GetUserLimiter(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.UserLimiterResp, error)
	// 获取当前的时间
	GetCurrentTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CurrentTime, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) GetSetting(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.Setting, error) {
	out := new(v1.Setting)
	err := c.cc.Invoke(ctx, "/config.v1.ConfigService/GetSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetClientInfo(ctx context.Context, in *v1.ClientReq, opts ...grpc.CallOption) (*v1.Client, error) {
	out := new(v1.Client)
	err := c.cc.Invoke(ctx, "/config.v1.ConfigService/GetClientInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetVpsInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.Vps, error) {
	out := new(v1.Vps)
	err := c.cc.Invoke(ctx, "/config.v1.ConfigService/GetVpsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) SetIpInfo(ctx context.Context, in *v1.IpInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/config.v1.ConfigService/SetIpInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetUserAuth(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.UserAuthResp, error) {
	out := new(v1.UserAuthResp)
	err := c.cc.Invoke(ctx, "/config.v1.ConfigService/GetUserAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetUserLimiter(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.UserLimiterResp, error) {
	out := new(v1.UserLimiterResp)
	err := c.cc.Invoke(ctx, "/config.v1.ConfigService/GetUserLimiter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetCurrentTime(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CurrentTime, error) {
	out := new(CurrentTime)
	err := c.cc.Invoke(ctx, "/config.v1.ConfigService/GetCurrentTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations should embed UnimplementedConfigServiceServer
// for forward compatibility
type ConfigServiceServer interface {
	// 获取最新的配置
	GetSetting(context.Context, *emptypb.Empty) (*v1.Setting, error)
	// 获取最新客户端信息
	GetClientInfo(context.Context, *v1.ClientReq) (*v1.Client, error)
	// 获取vps信息
	GetVpsInfo(context.Context, *emptypb.Empty) (*v1.Vps, error)
	// 上报ip信息
	SetIpInfo(context.Context, *v1.IpInfo) (*emptypb.Empty, error)
	// 用户认证信息
	GetUserAuth(context.Context, *emptypb.Empty) (*v1.UserAuthResp, error)
	// 用户限流信息
	GetUserLimiter(context.Context, *emptypb.Empty) (*v1.UserLimiterResp, error)
	// 获取当前的时间
	GetCurrentTime(context.Context, *emptypb.Empty) (*CurrentTime, error)
}

// UnimplementedConfigServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConfigServiceServer struct {
}

func (UnimplementedConfigServiceServer) GetSetting(context.Context, *emptypb.Empty) (*v1.Setting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetting not implemented")
}
func (UnimplementedConfigServiceServer) GetClientInfo(context.Context, *v1.ClientReq) (*v1.Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientInfo not implemented")
}
func (UnimplementedConfigServiceServer) GetVpsInfo(context.Context, *emptypb.Empty) (*v1.Vps, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVpsInfo not implemented")
}
func (UnimplementedConfigServiceServer) SetIpInfo(context.Context, *v1.IpInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIpInfo not implemented")
}
func (UnimplementedConfigServiceServer) GetUserAuth(context.Context, *emptypb.Empty) (*v1.UserAuthResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAuth not implemented")
}
func (UnimplementedConfigServiceServer) GetUserLimiter(context.Context, *emptypb.Empty) (*v1.UserLimiterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLimiter not implemented")
}
func (UnimplementedConfigServiceServer) GetCurrentTime(context.Context, *emptypb.Empty) (*CurrentTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentTime not implemented")
}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_GetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.v1.ConfigService/GetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetSetting(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetClientInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetClientInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.v1.ConfigService/GetClientInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetClientInfo(ctx, req.(*v1.ClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetVpsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetVpsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.v1.ConfigService/GetVpsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetVpsInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_SetIpInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.IpInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).SetIpInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.v1.ConfigService/SetIpInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).SetIpInfo(ctx, req.(*v1.IpInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetUserAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetUserAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.v1.ConfigService/GetUserAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetUserAuth(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetUserLimiter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetUserLimiter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.v1.ConfigService/GetUserLimiter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetUserLimiter(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetCurrentTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetCurrentTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.v1.ConfigService/GetCurrentTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetCurrentTime(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.v1.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSetting",
			Handler:    _ConfigService_GetSetting_Handler,
		},
		{
			MethodName: "GetClientInfo",
			Handler:    _ConfigService_GetClientInfo_Handler,
		},
		{
			MethodName: "GetVpsInfo",
			Handler:    _ConfigService_GetVpsInfo_Handler,
		},
		{
			MethodName: "SetIpInfo",
			Handler:    _ConfigService_SetIpInfo_Handler,
		},
		{
			MethodName: "GetUserAuth",
			Handler:    _ConfigService_GetUserAuth_Handler,
		},
		{
			MethodName: "GetUserLimiter",
			Handler:    _ConfigService_GetUserLimiter_Handler,
		},
		{
			MethodName: "GetCurrentTime",
			Handler:    _ConfigService_GetCurrentTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config/v1/config.proto",
}
